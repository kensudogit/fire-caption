# 消防司令システムのNginx設定ファイル
# 
# このファイルは消防司令システムのリバースプロキシ設定を定義します。
# フロントエンドとバックエンドのリクエストを適切に振り分け、
# SSL終端、セキュリティヘッダー、Gzip圧縮などの機能を提供します。
# 
# @author FireCaptain Team
# @version 1.0

# イベント設定
events {
    worker_connections 1024;  # ワーカープロセスあたりの最大接続数
}

# HTTP設定ブロック
http {
    include       /etc/nginx/mime.types;  # MIMEタイプの定義ファイルをインクルード
    default_type  application/octet-stream;  # デフォルトのMIMEタイプ

    # ログ設定
    # アクセスログのフォーマット定義
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;  # アクセスログの出力先
    error_log /var/log/nginx/error.log;         # エラーログの出力先

    # 基本設定
    sendfile on;        # sendfile機能を有効化（ファイル転送の最適化）
    tcp_nopush on;      # TCP_NOPUSHオプションを有効化
    tcp_nodelay on;     # TCP_NODELAYオプションを有効化
    keepalive_timeout 65;  # Keep-Alive接続のタイムアウト時間
    types_hash_max_size 2048;  # タイプハッシュの最大サイズ

    # Gzip圧縮設定
    # レスポンスサイズを削減して転送速度を向上
    gzip on;                    # Gzip圧縮を有効化
    gzip_vary on;               # Varyヘッダーを追加
    gzip_min_length 1024;       # 最小圧縮サイズ（1KB）
    gzip_proxied any;           # プロキシされたリクエストも圧縮
    gzip_comp_level 6;          # 圧縮レベル（1-9、6がバランス）
    gzip_types                  # 圧縮対象のMIMEタイプ
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # セキュリティヘッダー設定
    # 各種セキュリティヘッダーを追加してセキュリティを強化
    add_header X-Frame-Options "SAMEORIGIN" always;                    # クリックジャッキング対策
    add_header X-XSS-Protection "1; mode=block" always;               # XSS対策
    add_header X-Content-Type-Options "nosniff" always;               # MIME型スニッフィング対策
    add_header Referrer-Policy "no-referrer-when-downgrade" always;    # リファラーポリシー
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;  # CSP

    # アップストリーム設定
    # バックエンドサーバーの定義
    upstream backend {
        server backend:8080;  # Spring Bootバックエンドサーバー
    }

    # フロントエンドサーバーの定義
    upstream frontend {
        server frontend:80;   # Angularフロントエンドサーバー
    }

    # HTTP to HTTPS リダイレクト設定
    # すべてのHTTPリクエストをHTTPSにリダイレクト
    server {
        listen 80;           # HTTPポート（80番）でリッスン
        server_name localhost;
        return 301 https://$server_name$request_uri;  # 301リダイレクトでHTTPSに転送
    }

    # HTTPS メインサーバー設定
    server {
        listen 443 ssl http2;  # HTTPSポート（443番）でリッスン、HTTP/2対応
        server_name localhost;

        # SSL/TLS設定
        ssl_certificate /etc/nginx/ssl/cert.pem;      # SSL証明書ファイル
        ssl_certificate_key /etc/nginx/ssl/key.pem;   # SSL秘密鍵ファイル
        ssl_protocols TLSv1.2 TLSv1.3;                # 使用するTLSプロトコルバージョン
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;  # 暗号化スイート
        ssl_prefer_server_ciphers off;                # サーバーサイドの暗号化スイート優先を無効化
        ssl_session_cache shared:SSL:10m;             # SSLセッションキャッシュ
        ssl_session_timeout 10m;                      # SSLセッションタイムアウト

        # フロントエンド（Angular）へのプロキシ設定
        location / {
            proxy_pass http://frontend;               # フロントエンドサーバーに転送
            proxy_set_header Host $host;              # ホストヘッダーを設定
            proxy_set_header X-Real-IP $remote_addr;  # クライアントの実IPを設定
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 転送されたIPを設定
            proxy_set_header X-Forwarded-Proto $scheme;  # 転送されたプロトコルを設定
        }

        # APIプロキシ設定（バックエンドへの転送）
        location /api/ {
            proxy_pass http://backend;                # バックエンドサーバーに転送
            proxy_set_header Host $host;              # ホストヘッダーを設定
            proxy_set_header X-Real-IP $remote_addr;  # クライアントの実IPを設定
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 転送されたIPを設定
            proxy_set_header X-Forwarded-Proto $scheme;  # 転送されたプロトコルを設定
            
            # WebSocket対応設定
            proxy_http_version 1.1;                   # HTTP/1.1を使用
            proxy_set_header Upgrade $http_upgrade;   # Upgradeヘッダーを設定
            proxy_set_header Connection "upgrade";    # Connectionヘッダーを設定
        }

        # WebSocketプロキシ
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ヘルスチェック
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}







